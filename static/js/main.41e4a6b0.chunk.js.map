{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","sortType","setSortType","isReversed","setReversed","currentGoods","goods","visibleGoods","sort","g1","g2","ALPHABET","localeCompare","LENGTH","length","NONE","reverse","getReorderedGoods","resetCondition","className","type","classNames","onClick","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAkBKA,E,0EAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,O,eAAAA,I,uBAAAA,I,oBAAAA,M,KA6BE,IAAME,EAAgB,WAC3B,MAAgCC,mBAAS,GAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAkCF,oBAAS,GAA3C,mBAAOG,EAAP,KAAmBC,EAAnB,KAEMC,EA3BD,SACLC,EAAiBL,EAAmBE,GAEpC,IAAMI,EAAY,YAAOD,GAiBzB,OAfAC,EAAaC,MAAK,SAACC,EAAIC,GACrB,OAAQT,GACN,KAAKJ,EAASc,SACZ,OAAOF,EAAGG,cAAcF,GAC1B,KAAKb,EAASgB,OACZ,OAAOJ,EAAGK,OAASJ,EAAGI,OACxB,QACE,OAAOjB,EAASkB,SAIlBZ,GACFI,EAAaS,UAGRT,EAOcU,CAAkBnB,EAAiBG,EAAUE,GAC5De,EAAiBjB,IAAaJ,EAASkB,MAAQZ,EAMrD,OACE,sBAAKgB,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IACT,iBACA,CAAE,WAAYpB,IAAaJ,EAASc,WAEtCW,QAAS,WACPpB,EAAYL,EAASc,WAPzB,iCAaA,wBACES,KAAK,SACLD,UAAWE,IACT,oBACA,CAAE,WAAYpB,IAAaJ,EAASgB,SAEtCS,QAAS,WACPpB,EAAYL,EAASgB,SAPzB,4BAaA,wBACEO,KAAK,SACLD,UAAWE,IACT,oBACA,CAAE,YAAalB,IAEjBmB,QAvCe,WACrBlB,GAAaD,IAgCT,qBAWCe,GACC,wBACEE,KAAK,SACLD,UAAU,4BACVG,QAAS,WACPpB,EAAYL,EAASkB,MACrBX,GAAY,IALhB,sBAaJ,6BACE,6BACGC,EAAakB,KAAI,SAACC,GAAD,OAChB,oBACE,UAAQ,OADV,SAIGA,GAFIA,cClHnBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.41e4a6b0.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\nimport classNames from 'classnames';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  NONE,\n  ALPHABET,\n  LENGTH,\n}\n\nexport function getReorderedGoods(\n  goods: string[], sortType:SortType, isReversed: boolean,\n) {\n  const visibleGoods = [...goods];\n\n  visibleGoods.sort((g1, g2) => {\n    switch (sortType) {\n      case SortType.ALPHABET:\n        return g1.localeCompare(g2);\n      case SortType.LENGTH:\n        return g1.length - g2.length;\n      default:\n        return SortType.NONE;\n    }\n  });\n\n  if (isReversed) {\n    visibleGoods.reverse();\n  }\n\n  return visibleGoods;\n}\n\nexport const App: React.FC = () => {\n  const [sortType, setSortType] = useState(0);\n  const [isReversed, setReversed] = useState(false);\n\n  const currentGoods = getReorderedGoods(goodsFromServer, sortType, isReversed);\n  const resetCondition = sortType !== SortType.NONE || isReversed;\n\n  const reverseHandler = () => {\n    setReversed(!isReversed);\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={classNames(\n            'button is-info',\n            { 'is-light': sortType !== SortType.ALPHABET },\n          )}\n          onClick={() => {\n            setSortType(SortType.ALPHABET);\n          }}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames(\n            'button is-success',\n            { 'is-light': sortType !== SortType.LENGTH },\n          )}\n          onClick={() => {\n            setSortType(SortType.LENGTH);\n          }}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames(\n            'button is-warning',\n            { 'is-light': !isReversed },\n          )}\n          onClick={reverseHandler}\n        >\n          Reverse\n        </button>\n\n        {resetCondition && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={() => {\n              setSortType(SortType.NONE);\n              setReversed(false);\n            }}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        <ul>\n          {currentGoods.map((good) => (\n            <li\n              data-cy=\"Good\"\n              key={good}\n            >\n              {good}\n            </li>\n          ))}\n        </ul>\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}